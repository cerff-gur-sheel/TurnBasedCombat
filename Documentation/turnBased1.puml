@startuml
title Turn-Based RPG Combat System (Unity Asset)

interface IBattleState {
    +Enter()
    +Update()
    +Exit()
}

class BattleManager {
    -currentState: IBattleState
    -states: Dictionary<string, IBattleState>
    +ChangeState(stateName: string)
    +Update()
}

class StartTurnState implements IBattleState
class SelectActionState implements IBattleState
class ExecuteActionState implements IBattleState
class EndTurnState implements IBattleState
class VictoryState implements IBattleState
class DefeatState implements IBattleState

interface ICommand {
    +Execute()
    +Undo()
}

class AttackCommand implements ICommand
class DefendCommand implements ICommand
class UseItemCommand implements ICommand
class UseSkillCommand implements ICommand

interface IAttackStrategy {
    +ChooseCommand(): ICommand
}

class AggressiveStrategy implements IAttackStrategy
class DefensiveStrategy implements IAttackStrategy
class RandomStrategy implements IAttackStrategy

class Character {
    +name: string
    +hp: int
    +attack: int
    +defense: int
    +ExecuteCommand(command: ICommand)
    +SetStrategy(strategy: IAttackStrategy)
}

class PlayerCharacter extends Character
class EnemyCharacter extends Character

class UIManager {
    +OnTurnChanged()
    +OnDamageDealt()
    +OnVictory()
    +OnDefeat()
}

' Relationships
BattleManager --> IBattleState
IBattleState <|.. StartTurnState
IBattleState <|.. SelectActionState
IBattleState <|.. ExecuteActionState
IBattleState <|.. EndTurnState
IBattleState <|.. VictoryState
IBattleState <|.. DefeatState

Character --> ICommand
ICommand <|.. AttackCommand
ICommand <|.. DefendCommand
ICommand <|.. UseItemCommand
ICommand <|.. UseSkillCommand

EnemyCharacter --> IAttackStrategy
IAttackStrategy <|.. AggressiveStrategy
IAttackStrategy <|.. DefensiveStrategy
IAttackStrategy <|.. RandomStrategy

BattleManager --> UIManager : events/observer
Character --> UIManager : events/observer
@enduml

