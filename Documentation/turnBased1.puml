@startuml
title Turn-Based RPG Combat System (Unity Asset) - Refined

' --- Estados da batalha ---
interface IBattleState {
    +Enter(context: BattleContext)
    +Update(context: BattleContext)
    +Exit(context: BattleContext)
}

class BattleManager {
    -currentState: IBattleState
    -states: Dictionary<Type, IBattleState>
    -context: BattleContext
    +ChangeState(stateType: Type)
    +Update()
}

class StartTurnState implements IBattleState
class SelectActionState implements IBattleState
class ExecuteActionState implements IBattleState
class EndTurnState implements IBattleState
class VictoryState implements IBattleState
class DefeatState implements IBattleState

' --- Contexto ---
class BattleContext {
    +turnOrder: List<Character>
    +currentCharacter: Character
    +allies: List<PlayerCharacter>
    +enemies: List<EnemyCharacter>
    +log: List<string>
}

' --- Comandos ---
interface ICommand {
    +Execute(context: BattleContext)
}

class AttackCommand implements ICommand
class DefendCommand implements ICommand
class UseItemCommand implements ICommand
class UseSkillCommand implements ICommand

' --- Estratégias de IA ---
interface IAttackStrategy {
    +ChooseCommand(enemy: EnemyCharacter, context: BattleContext): ICommand
}

class AggressiveStrategy implements IAttackStrategy
class DefensiveStrategy implements IAttackStrategy
class RandomStrategy implements IAttackStrategy

' --- Personagens ---
class Character {
    +name: string
    +hp: int
    +attack: int
    +defense: int
    +ExecuteCommand(command: ICommand, context: BattleContext)
}

class PlayerCharacter extends Character
class EnemyCharacter extends Character {
    -strategy: IAttackStrategy
    +SetStrategy(strategy: IAttackStrategy)
}

' --- Interface/UI ---
class UIManager {
    +OnTurnChanged(character: Character)
    +OnDamageDealt(source: Character, target: Character, amount: int)
    +OnVictory()
    +OnDefeat()
    +RequestPlayerAction(): ICommand
}

' --- Relações ---
BattleManager --> IBattleState
BattleManager --> BattleContext
BattleManager --> UIManager : notify events

IBattleState <|.. StartTurnState
IBattleState <|.. SelectActionState
IBattleState <|.. ExecuteActionState
IBattleState <|.. EndTurnState
IBattleState <|.. VictoryState
IBattleState <|.. DefeatState

Character --> ICommand
ICommand <|.. AttackCommand
ICommand <|.. DefendCommand
ICommand <|.. UseItemCommand
ICommand <|.. UseSkillCommand

EnemyCharacter --> IAttackStrategy
IAttackStrategy <|.. AggressiveStrategy
IAttackStrategy <|.. DefensiveStrategy
IAttackStrategy <|.. RandomStrategy

Character --> UIManager : events/observer
@enduml

